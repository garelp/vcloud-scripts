function check_vm_exists () {
	# Check if a VM Exist in the current organisation
	# $1: VM NAme
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	vmStatus=$(http --session=vcloud GET "$vcdUrl/vApps/query?filter=(name==$1)" | xml2 | grep total | cut -d = -f 2)
	return $vmStatus
}

function check_tmpl_exists () {
	# Check if a Template Exist in the current Catalog
	# $1: Template Name to check
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	vmStatus=$(http --session=vcloud GET "$vcdUrl/query?type=vAppTemplate&filter=(name==$1)" | xml2 | grep total | cut -d = -f 2)
	return $vmStatus
}

function set_vm_custo () {
	# $1: vmName $2: GuestCusto $3: ChangeSid $4: ChangeAdminPass
	# value: on/off 
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1)" | xml2 | grep VMRecord | grep href | cut -d = -f 2)
	http --session=vcloud GET "$vmUrl/guestCustomizationSection" | xml2 > /tmp/$$-custo
	
	if [ "$2" == "off" ]; then
		cat /tmp/$$-custo | sed -e "s/Enabled=true/Enabled=false/" > /tmp/$$-new-custo
		cp /tmp/$$-new-custo /tmp/$$-custo
	fi
	if [ "$3" == "off" ]; then 
		cat /tmp/$$-custo | sed -e "s/ChangeSid=true/ChangeSid=false/" > /tmp/$$-new-custo
		cp /tmp/$$-new-custo /tmp/$$-custo
	fi
	if [ "$4" == "off" ]; then 
		cat /tmp/$$-custo | sed -e "s/AdminPasswordEnabled=true/AdminPasswordEnabled=false/" > /tmp/$$-new-custo
		cp /tmp/$$-new-custo /tmp/$$-custo
	fi
	
	cat /tmp/$$-custo | 2xml > /tmp/$$-custo.xml
	
	vmCusto=$(http --session=vcloud PUT "$vmUrl/guestCustomizationSection" 'Content-type:application/vnd.vmware.vcloud.guestCustomizationSection+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1' < /tmp/$$-custo.xml)

	rm -f /tmp/$$-custo /tmp/$$-new-custo /tmp/$$-custo.xml
}

function get_vm_custo () {
    # $1: vmName
	# returns VM customizaiont parameters
    vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
    vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1)" | xml2 | grep VMRecord | grep href | cut -d = -f 2)
    http --session=vcloud GET "$vmUrl/guestCustomizationSection" | xml2
}

function get_vapp_info () {
	# $1: Vapp Name
    vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
    http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass GET "$vcdUrl/vApps/query?filter=(name==$1)" | xml2 | grep VAppRecord | cut -d @ -f 2

}

function set_vapp_desc () {
	# $1: Vapp Name
	# $2: Vapp description
	
vappContent=$(cat <<EOF
<?xml version="1.0" encoding="UTF-8" standalone="no"?> 
<VApp 
    xmlns="http://www.vmware.com/vcloud/v1.5"
	name="$1">
    <Description>$2</Description>
</VApp>
EOF)

	echo "setting description to $1."
	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	vmResult=$(echo $vappContent | http --session=vcloud PUT $vappUrl 'Content-type:application/vnd.vmware.vcloud.vApp+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1')
	
}

function get_vm_info () {
    # $1: vmName
    vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
    vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1)" | xml2 | grep VMRecord | grep href | cut -d = -f 2)
    http --session=vcloud GET "$vmUrl/" | xml2
}

function get_pool_info () {
	# $1: Pool Name
	# Return all information about the pool.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	http --session=vcloud GET "$vcdUrl/query?type=orgVdc&filter=(name==$1)" | xml2 | grep OrgVdcRecord | cut -d @ -f 2
}

function get_pool_list () {
	# Return the list of available pools.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	http --session=vcloud GET "$vcdUrl/query?type=orgVdc" | xml2 | grep OrgVdcRecord | egrep 'name' | egrep -v 'Networking|Private Catalog' | cut -d = -f 2
}

function get_vca_profile () {
	vca profile
}

function set_vca_profile () {
	# $1: Profile Name
	echo "Setting vca-cli profile to \"$1\"".
	crudini --set $HOME/.vcarc Global profile "$1"
}

function set_vca_vdc () {
	# $1: Profile Name
	# $2: vdc Name
	echo "Setting vdc $2 for profile \"$1\"".
	crudini --set $HOME/.vcarc "Profile-$1" vdc "$2"
}

function get_task_info () {
	#$1: Task ID
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	http --session=vcloud GET "$vcdUrl/task/$1" | xml2 | egrep 'Task\/@status|Task\/@operation|Owner\/@name' | cut -d @ -f 2
}

function display_tasks_list () {
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	
	for task_url in $(http --session=vcloud GET "$vcdUrl/query?type=task" | xml2 | grep "TaskRecord/@href=" | cut -d = -f 2)
	do
		task_id=$(basename $task_url)
		for taskLine in $(get_task_info $task_id)
		do
			valueName=$(echo $taskLine | cut -d "=" -f 1)
			valueContent=$(echo $taskLine | cut -d "=" -f 2)
			case $valueName in
				'status') status=$valueContent
				;;
				'operationName') operationName=$valueContent
				;;
				'operation') operation="$valueContent"
				;;
				'name') name=$valueContent
				;;
			esac
		done
		printf "%s - %s - %s - %s - %s\n" $task_id $status $operationName "$operation" $name
	done
		
}