###################################################################################
##           Set of shell functions to use the VCloud Director API               ##
###################################################################################

function check_vm_exists () {
	# Check if a VM Exist in the current organisation
	# $1: VM NAme
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	vmStatus=$(http --session=vcloud GET "$vcdUrl/vApps/query?filter=(name==$1)" | xml2 | grep total | cut -d = -f 2)
	return $vmStatus
}

function check_tmpl_exists () {
	# Check if a Template Exist in the current Catalog
	# $1: Template Name to check
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	vmStatus=$(http --session=vcloud GET "$vcdUrl/query?type=vAppTemplate&filter=(name==$1)" | xml2 | grep total | cut -d = -f 2)
	return $vmStatus
}

function wait_task_running () {
	# wait for a task to complete
	# $1: taskID

	wt_taskID=$1
	taskStatus=$(get_task_status $wt_taskID)
	#echo -n $taskStatus
	while [ $taskStatus == "running" ] || [ $taskStatus == "preRunning" ]
	do
		taskStatus=$(get_task_status $wt_taskID)
		#echo -n $taskStatus
		echo -n "#"
	done
}

function get_task_status () {
	# return the task status ( success, running, error...)
	# $1: taskID
	# resturn task status
	get_task_info $1 | grep status | cut -d = -f 2
}

function get_task_id () {
	# $1: XML format task.
	# return taskId
	taskUrl=$(echo $1 | xml2 | grep Task/@href | cut -d = -f 2)
	taskId=$(basename $taskUrl)
	echo $taskId
}

function get_children_vm_url () {
	# $1: vapp name

	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f2)
	http --session=vcloud "$vappUrl" | xml2 | grep "Children/Vm/@href" | cut -d = -f2

}

function get_children_vm_name () {
	# $1: vapp name

	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f2)
	http --session=vcloud "$vappUrl" | xml2 | grep "Children/Vm/@name" | cut -d = -f2

}

function set_vm_custo () {
	# $1: vmName $2: GuestCusto $3: ChangeSid $4: ChangeAdminPass $5: vAppName $6: AdminPassword
	# value: on/off
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1;containerName==$5)" | xml2 | egrep  "vm-" | grep -v "vAppTemplate" | grep href | cut -d = -f 2)

	http --session=vcloud GET "$vmUrl/guestCustomizationSection" | xml2 > /tmp/$$-custo

	if [ "$2" == "off" ]; then
		cat /tmp/$$-custo | sed -e "s/Enabled=true/Enabled=false/" > /tmp/$$-new-custo
		cp /tmp/$$-new-custo /tmp/$$-custo
	fi
	if [ "$3" == "off" ]; then
		cat /tmp/$$-custo | sed -e "s/ChangeSid=true/ChangeSid=false/" > /tmp/$$-new-custo
		cp /tmp/$$-new-custo /tmp/$$-custo
	fi
	if [ "$4" == "off" ]; then
		cat /tmp/$$-custo | sed -e "s/AdminPasswordEnabled=true/AdminPasswordEnabled=false/" > /tmp/$$-new-custo
		cp /tmp/$$-new-custo /tmp/$$-custo
	else
		if [[ $6 ]]; then
			# if a password is defined, set it
			cat /tmp/$$-custo  | grep -v "GuestCustomizationSection/Link" | sed -e "s/AdminPasswordAuto=true/AdminPasswordAuto=false/" > /tmp/$$-new-custo
			echo "/GuestCustomizationSection/AdminPassword=\"$6\"" >> /tmp/$$-new-custo
			#echo "/GuestCustomizationSection/AdminPassword/@AdminPassword=" >> /tmp/$$-new-custo
			echo "/GuestCustomizationSection/Link/@rel=edit" >> /tmp/$$-new-custo
			echo "/GuestCustomizationSection/Link/@type=application/vnd.vmware.vcloud.guestCustomizationSection+xml" >> /tmp/$$-new-custo
			echo "/GuestCustomizationSection/Link/@href=$vmUrl/guestCustomizationSection/" >> /tmp/$$-new-custo
			cp /tmp/$$-new-custo /tmp/$$-custo
		fi
	fi

	cat /tmp/$$-custo | 2xml > /tmp/$$-custo.xml

	echo -n "Setting customization for $1... "

	vmCusto=$(http --session=vcloud PUT "$vmUrl/guestCustomizationSection" 'Content-type:application/vnd.vmware.vcloud.guestCustomizationSection+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.5' < /tmp/$$-custo.xml)

	errorCode=$(echo $vmCusto | xml2 | grep @majorErrorCode | cut -d = -f 2)
	if [[ $errorCode ]]; then
		# Get the error message from XML response.
		errorMessage=$(echo $vmCusto | xml2 | grep @message | cut -d = -f 2)
		printf "\n$errorMessage\n"
	else
		# No error detected so far
		taskUrl=$(echo $vmCusto | xml2 | grep Task/@href | cut -d = -f 2)
		taskID=$(basename $taskUrl)

		wait_task_running $taskID

		rm -f /tmp/$$-custo /tmp/$$-new-custo /tmp/$$-custo.xml
		printf "\nDone.\n"
	fi
}

function get_vm_custo () {
  # $1: vmName
	# $2: vAppNAme
	# returns VM customizaiont parameters
    vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
    vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1;containerName==$2)" | xml2 | egrep  "vm-" | grep -v "vAppTemplate" | grep href | cut -d = -f 2)
    http --session=vcloud GET "$vmUrl/guestCustomizationSection" | xml2
}

function get_vapp_info () {
	# $1: Vapp Name
    vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
    http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass GET "$vcdUrl/vApps/query?filter=(name==$1)" | xml2 | grep VAppRecord | cut -d @ -f 2

}

function set_vapp_desc () {
	# $1: Vapp Name
	# $2: Vapp description

	#<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	#<VApp
	#    xmlns="http://www.vmware.com/vcloud/v1.5"
	#    name="$1">
	#    <Description>$2</Description>
	#</VApp>

	echo "/VApp/@xmlns=http://www.vmware.com/vcloud/v1.5" > /tmp/$$-vm-desc
	echo "/VApp/@name=$1" >> /tmp/$$-vm-desc
	echo "/VApp/Description=$2" >> /tmp/$$-vm-desc
	cat /tmp/$$-vm-desc | 2xml > /tmp/$$-vm-desc.xml

	echo "setting description to $1."
	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	vmResult=$(http --session=vcloud PUT $vappUrl 'Content-type:application/vnd.vmware.vcloud.vApp+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1' < /tmp/$$-vm-desc.xml )
	sleep 1
	rm -f /tmp/$$-vm-desc /tmp/$$-vm-desc.xml
}

function get_vm_info () {
    # $1: vmName
    vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
    vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1)" | xml2 | grep VMRecord | grep href | cut -d = -f 2)
    http --session=vcloud GET "$vmUrl/" | xml2
}

function get_pool_info () {
	# $1: Pool Name
	# Return all information about the pool.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	http --session=vcloud GET "$vcdUrl/query?type=orgVdc&filter=(name==$1)" | xml2 | grep OrgVdcRecord | cut -d @ -f 2
}

function get_pool_info_csv () {
	# $1: Pool Name
	# Return all information about the pool in csv format.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	poolData=$(http --session=vcloud GET "$vcdUrl/query?type=orgVdc&filter=(name==$1)")

	poolName=$1
	storageUsedMB=$(echo $poolData | xml2 | grep "@storageUsedMB" | cut -d = -f 2)
	storageLimitMB=$(echo $poolData | xml2 | grep "@storageLimitMB" | cut -d = -f 2)
	orgName=$(echo $poolData | xml2 | grep "@orgName" | cut -d = -f 2)
	numberOfVApps=$(echo $poolData | xml2 | grep "@numberOfVApps" | cut -d = -f 2)
	memoryUsedMB=$(echo $poolData | xml2 | grep "@memoryUsedMB" | cut -d = -f 2)
	memoryLimitMB=$(echo $poolData | xml2 | grep "@memoryLimitMB" | cut -d = -f 2)
	cpuUsedMhz=$(echo $poolData | xml2 | grep "@cpuUsedMhz" | cut -d = -f 2)
	cpuLimitMhz=$(echo $poolData | xml2 | grep "@cpuLimitMhz" | cut -d = -f 2)

	#echo $poolData | xml2
	echo "$orgName,$poolName,$storageUsedMB,$storageLimitMB,$numberOfVApps,$memoryUsedMB,$memoryLimitMB,$cpuUsedMhz,$cpuLimitMhz"
}


function get_pool_list () {
	# Return the list of available pools.
	vcdLogin=$(http --verify=no --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	if [[ $1 ]]; then
		if [ $1=="-a" ]; then
			#echo "OrgName,pool Name,storageUsedMB,storageLimitMB,numberOfVApps,memoryUsedMB,memoryLimitMB,cpuUsedMhz,cpuLimitMhz"
			for pool in $(get_pool_list)
			do
				get_pool_info_csv $pool
			done
		fi
	else
		http --verify=no --session=vcloud GET "$vcdUrl/query?type=orgVdc&pageSize=200" | xml2 | grep OrgVdcRecord | egrep 'name' | egrep -v 'Networking|Private Catalog' | cut -d = -f 2
	fi
}

function get_vca_profile () {
	vca profile
}

function set_vca_profile () {
	# $1: Profile Name
	echo "Setting vca-cli profile to \"$1\"".
	crudini --set $HOME/.vcarc Global profile "$1"
}

function set_vca_vdc () {
	# $1: Profile Name
	# $2: vdc Name
	echo "Setting vdc $2 for profile \"$1\"".
	crudini --set $HOME/.vcarc "Profile-$1" vdc "$2"
}

function get_task_info () {
	#$1: Task ID
	# return some task info based on the task ID.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	xmlTask=$(http --session=vcloud GET "$vcdUrl/task/$1")
	echo $xmlTask | xml2 | egrep 'Task\/@status|Task\/@operation|Owner\/@name|Task/@endTime|Task/@startTime' | cut -d @ -f 2
	taskProgress=$(echo $xmlTask | xml2 | egrep 'Progress' | cut -d = -f2)
	echo "Progress=$taskProgress"
}

function display_tasks_list () {
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	for task_url in $(http --session=vcloud GET "$vcdUrl/query?type=task" | xml2 | grep "TaskRecord/@href=" | cut -d = -f 2)
	do
		task_id=$(basename $task_url)
		for taskLine in $(get_task_info $task_id)
		do
			valueName=$(echo $taskLine | cut -d "=" -f 1)
			valueContent=$(echo $taskLine | cut -d "=" -f 2)
			case $valueName in
				'status') status=$valueContent
				;;
				'operationName') operationName=$valueContent
				;;
				'operation') operation="$valueContent"
				;;
				'name') name=$valueContent
				;;
				'endTime') endTime=$valueContent
				;;
			esac
		done
		printf "%s - %s - %s - %s - %s - %s\n" $task_id $endTime $status $operationName "$operation" $name
	done

}

function display_running_tasks () {
	# Show all running tasks for the current Org.
	#
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	for task_url in $(http --session=vcloud GET "$vcdUrl/query?type=task&filter=(status==running)" | xml2 | grep "TaskRecord/@href=" | cut -d = -f 2)
	do
		task_id=$(basename $task_url)
		for taskLine in $(get_task_info $task_id)
		do
			valueName=$(echo $taskLine | cut -d "=" -f 1)
			valueContent=$(echo $taskLine | cut -d "=" -f 2)
			case $valueName in
				'status') status=$valueContent
				;;
				'operationName') operationName=$valueContent
				;;
				'operation') operation="$valueContent"
				;;
				'name') name=$valueContent
				;;
				'endTime') endTime=$valueContent
				;;
			esac
		done
		printf "%s - %s - %s - %s - %s - %s\n" $task_id $endTime $status $operationName "$operation" $name
	done

}

function get_vms_url () {
	# Return all VM URL for the current VRoom/Customer ID
	#vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	http --session=vcloud GET "$vcdUrl/query?type=vm&pageSize=200" | xml2 | egrep  "vm-" | grep -v "vAppTemplate" | cut -d "=" -f 2
}

function get_vms_list () {
	# Return all vm available in the current VROOM.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
	http --session=vcloud GET "$vcdUrl/query?type=vm&pageSize=200&fields=name&filter=(isVAppTemplate==false)" | xml2 | egrep "VMRecord/@name" | cut -d = -f 2
}

function get_vapp_list () {
	# Return list of vApps for the current vRoom.
	# $1 = -a : displays more info about each vapp.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	if [[ $1 ]]; then
		if [ $1=="-a" ]; then
			for vapp in $(get_vapp_list)
			do
				vappNameClean=$(echo $vapp | sed -e "s/ /%20/g")
				vappXMLData=$(http --session=vcloud GET "$vcdUrl/vApps/query?filter=(name==$vappNameClean)")
				vappName="$vapp"
				vappCPU=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "numberOfCpus=" | cut -d = -f 2)
				vappMEM=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "memoryAllocationMB=" | cut -d = -f 2)
				vappDISK=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "storageKB=" | cut -d = -f 2)
				vappUrl=$(echo $vappXMLData  | xml2 | grep VAppRecord | grep "@href=" | cut -d = -f 2)
				vappStatus=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "@status=" | cut -d = -f 2)
				vappDeployed=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "@isDeployed=" | cut -d = -f 2)

				vappXMLData=$(http --session=vcloud GET "$vappUrl")
				vappIpAddress=$(echo $vappXMLData | xml2 | grep IpAddress= | cut -d = -f 2 | head -1)
				vappDesc=$(echo $vappXMLData | xml2 | grep VApp/Description= | cut -d = -f 2 )
				vappTools=$(echo $vappXMLData | xml2 | grep VMWareTools | cut -d = -f 2 )

				echo "$vappName,$vappCPU,$vappMEM,$vappStatus,$vappDeployed,$vappDISK,$vappIpAddress,\"$vappDesc\",$vappTools"
			done
		fi
	else
		vappXMLData=$(http --session=vcloud GET "$vcdUrl/vApps/query?pageSize=128")
		vappTotal=$(echo $vappXMLData | xml2 | grep @total | cut -d = -f 2)
		echo $vappXMLData | xml2 | grep "VAppRecord/@name=" | cut -d = -f 2 | sort

		if [ $vappTotal -gt 128 ]; then
			vappXMLData=$(http --session=vcloud GET "$vcdUrl/vApps/query?page=2&pageSize=128")
			echo $vappXMLData | xml2 | grep "VAppRecord/@name=" | cut -d = -f 2 | sort
		fi
		if [ $vappTotal -gt 256 ]; then
			vappXMLData=$(http --session=vcloud GET "$vcdUrl/vApps/query?page=3&pageSize=128")
			echo $vappXMLData | xml2 | grep "VAppRecord/@name=" | cut -d = -f 2 | sort
		fi

	fi
}

function get_all_vapps_features () {
	# Return in CSV format the list of vapp features for the current vRoom.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	for vapp in $(get_vapp_list)
	do
		vappXMLData=$(http --session=vcloud GET "$vcdUrl/vApps/query?filter=(name==$vapp)")
		vappName=$vapp
		vappVDCName=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "vdcName=" | cut -d = -f 2)
		vappCPU=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "numberOfCpus=" | cut -d = -f 2)
		vappMEM=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "memoryAllocationMB=" | cut -d = -f 2)
		vappDISK=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "storageKB=" | cut -d = -f 2)
		vappUrl=$(echo $vappXMLData  | xml2 | grep VAppRecord | grep "@href=" | cut -d = -f 2)
		vappVhVersion=$(echo $vappXMLData | xml2 | grep VAppRecord | grep "lowestHardwareVersionInVApp=" | cut -d = -f 2)

		vappXMLData=$(http --session=vcloud GET "$vappUrl")
		vappIpAddress=$(echo $vappXMLData | xml2 | grep IpAddress= | cut -d = -f 2 | head -1)
		vappNetName=$(echo $vappXMLData | xml2 | grep @network= | cut -d = -f 2 | head -1)
		vappOSName=$(echo $vappXMLData | xml2 | grep OperatingSystemSection/ovf:Description= | cut -d = -f 2)
		vappDesc=$(echo $vappXMLData | xml2 | grep VApp/Description= | cut -d = -f 2 )
		vappTools=$(echo $vappXMLData | xml2 | grep VMWareTools | cut -d = -f 2 )

		echo "$vappName,$vappCPU,$vappMEM,$vappDISK,$vappIpAddress,$vappNetName,$vappVDCName,$vappOSName,\"$vappDesc\",$vappTools,$vappVhVersion"
	done
}

function get_network_name () {
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	http --session=vcloud GET "$vcdUrl/query?type=orgVdcNetwork" | xml2 | grep OrgVdcNetworkRecord | grep @name | cut -d = -f 2
}

function create_vapp_snaphot () {
	# $1: Vapp Name

	#<?xml version="1.0" encoding="UTF-8"?>
	#<CreateSnapshotParams
	#   xmlns="http://www.vmware.com/vcloud/v1.5"
	#   name="Snapshot-$1">
	#   <Description>Snapshot of Vapp $1</Description>
	#</CreateSnapshotParams>

	echo "/CreateSnapshotParams/@xmlns=http://www.vmware.com/vcloud/v1.5" > /tmp/$$-vm-net
	echo "/CreateSnapshotParams/@name=Snapshot-$1" >> /tmp/$$-vm-net
	echo "/CreateSnapshotParams/Description=Snapshot of Vapp $1" >> /tmp/$$-vm-net
	cat /tmp/$$-vm-net | 2xml > /tmp/$$-vm-net.xml

	echo -n "Creating snapshot for $1 ... "
	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	vmResult=$(http --session=vcloud POST $vappUrl/action/createSnapshot 'Content-type:application/vnd.vmware.vcloud.createSnapshotParams+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1' < /tmp/$$-vm-net.xml )

	taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDone.\n"
	rm -f /tmp/$$-vm-net /tmp/$$-vm-net.xml
}

function get_vapp_snapshot () {
	# $1: Vapp Name
	# return Snapshot info for the vapp.

	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	vmResult=$(http --session=vcloud GET $vappUrl/snapshotSection)
	snapSize=$( echo $vmResult | xml2 | grep @size | cut -d = -f 2 )
	snapPowerState=$( echo $vmResult | xml2 | grep @poweredOn | cut -d = -f 2 )
	snapDate=$( echo $vmResult | xml2 | grep @created | cut -d = -f 2 )

	echo "$snapSize,$snapPowerState,$snapDate"
}

function revert_vapp_snapshot () {
	# $1: Vapp Name
	# revert Vapp to the current snapshot.

	echo -n "Reverting $1 to current snapshot ... "
	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	vmResult=$(http --session=vcloud POST $vappUrl/action/revertToCurrentSnapshot)

	taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDone.\n"

}

function remove_vapp_snapshot () {
	# $1: Vapp Name
	# Remove the current vapp snapshot and free assiciated space.

	echo -n "Removing $1 current snapshot ... "
	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	vmResult=$(http --session=vcloud POST $vappUrl/action/removeAllSnapshots)

	taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDone.\n"

}

function get_template_list () {
	# Return the list of template name from the private catalog

	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	http --session=vcloud GET "$vcdUrl/query?type=vAppTemplate&pageSize=100" | xml2 | grep VAppTemplateRecord/@name | cut -d = -f 2 | sort
}

function get_template_info () {
    # $1: template Name
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	tmplXML=$(http --session=vcloud GET "$vcdUrl/query?type=vAppTemplate&filter=(name==$1)")
	echo $tmplXML | xml2 | grep VAppTemplateRecord | cut -d @ -f 2
	tmplUrl=$(echo $tmplXML | xml2 | grep VAppTemplateRecord | cut -d @ -f 2 | grep "href=" | cut -d = -f 2)
	vmUrl=$(http --session=vcloud "$tmplUrl" | xml2 | grep "Children/Vm/@href" | cut -d = -f2)
	echo "ChildrenVM=$vmUrl"
}

function get_template_feature () {
    # $1: template name
    # Return: templateName,status,creation Date,StorageUsedKB

    get_template_info $1 | egrep -v "vdcName|catalogName|taskDetails" > /tmp/$$.template-values
    source /tmp/$$.template-values
		#echo $ChildrenVM
		vmToolsVersion=$(http --session=vcloud GET "$ChildrenVM" | xml2 | grep version | cut -d = -f 2)
    printf "%s,%s,%s,%s,%s,%s\n" $vcdOrg $name $status $creationDate $storageKB $vmToolsVersion
    #rm /tmp/$$.template-values
}

function get_vdc_template_list () {
    # Returns all the templates info for the current Org.

    for orgTmpl in $(get_template_list)
    do
        get_template_feature $orgTmpl
    done
}

function get_template_status () {
	# Returns template status
	# $1: template name

	get_template_info $1 | grep status | cut -d = -f2
}

function get_vapp_power () {
	# return power vapp power status.
	# $1: vapp name

	vappPower=$(get_vapp_info $1 | grep status | cut -d = -f2)
	echo -n $vappPower
}

function get_vapp_deploy () {
	# return vapp deployed status.
	# $1: vapp name

	vappDeploy=$(get_vapp_info $1 | grep isDeployed | cut -d = -f2)
	echo -n $vappDeploy
}

function power_on_vapp () {
	# $1: Vapp Name.
	#
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	vappPowerState=$(get_vapp_power $1)
	if [ $vappPowerState == "POWERED_OFF" ]
	then
		vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
		vmResult=$(http --session=vcloud POST $vappUrl/power/action/powerOn)

		taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
		taskID=$(basename $taskUrl)

		wait_task_running $taskID
		printf "\nDone.\n"
	fi
}

function power_off_vapp () {
	# Power off a Vapp and undeploy it.
	# $1: Vapp Name.
	#
	vcdUndeployAction='<UndeployVAppParams xmlns="http://www.vmware.com/vcloud/v1.5"><UndeployPowerAction>powerOff</UndeployPowerAction></UndeployVAppParams>'

	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	vappPowerState=$(get_vapp_power $1)
	vappDeployState=$(get_vapp_deploy $1)

	if [ $vappPowerState == "POWERED_ON" ]
	then
		vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
		vmResult=$(http --session=vcloud POST $vappUrl/power/action/powerOff)

		taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
		taskID=$(basename $taskUrl)

		wait_task_running $taskID
		printf "\nvapp $1 powered-off.\n"
	fi

	if [ $vappDeployState == "true" ]
	then
		vmResult=$(echo $vcdUndeployAction | http --session=vcloud POST $vappUrl/action/undeploy 'Content-type:application/vnd.vmware.vcloud.undeployVAppParams+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1')

		taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
		taskID=$(basename $taskUrl)

		wait_task_running $taskID
		printf "\nvapp $1 undeployed.\n"
	fi
}

function shutdown_vapp () {
	# Perform a clean shutdown of a Vapp. Need Vmware Tools.
	# $1: Vapp Name.
	#
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	vappPowerState=$(get_vapp_power $1)
	if [ $vappPowerState == "POWERED_ON" ]
	then
		vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
		vmResult=$(http --session=vcloud POST $vappUrl/power/action/shutdown)

		taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
		taskID=$(basename $taskUrl)

		wait_task_running $taskID
		printf "\nDone.\n"
	fi
}

function clone_vapp2tmpl () {
	# Clone to the given Vapp to a template into the private Catalog
	# $1: Vapp Name.
	# $2: async (asynchronous cloning, return taskID)

	vappPowerState=$(get_vapp_power $1)
	if [ $vappPowerState == "POWERED_OFF" ]
	then
		check_tmpl_exists "$1-clone"
		if [ $? -eq 0 ]
		then
			vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')
			vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)

			#<?xml version="1.0" encoding="UTF-8"?>
			#<CaptureVAppParams
			#   xmlns="http://www.vmware.com/vcloud/v1.5"
			#   name="$1-clone">
			#   <Description>Captured $1</Description>
			#   <Source href="$vappUrl" />
			#</CaptureVAppParams>

			echo "/CaptureVAppParams/@xmlns=http://www.vmware.com/vcloud/v1.5" > /tmp/$$-vm-capture
			echo "/CaptureVAppParams/@name=$1-clone" >> /tmp/$$-vm-capture
			echo "/CaptureVAppParams/Description=Captured $1" >> /tmp/$$-vm-capture
			echo "/CaptureVAppParams/Source/@href=$vappUrl" >> /tmp/$$-vm-capture
			cat /tmp/$$-vm-capture | 2xml > /tmp/$$-vm-capture.xml

			vcdCatalogUrl=$(http --session=vcloud GET "$vcdUrl/catalogs/query?filter=(name==$vcdCatalog)" | xml2 | grep CatalogRecord/@href | cut -d = -f2)
			vmResult=$(http --session=vcloud POST $vcdCatalogUrl/action/captureVApp 'Content-type:application/vnd.vmware.vcloud.captureVAppParams+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1' < /tmp/$$-vm-capture.xml )
			rm -f /tmp/$$-vm-capture /tmp/$$-vm-capture.xml

			taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
			taskID=$(basename $taskUrl)

			if [ -z "$2" ]
			then
				wait_task_running $taskID
				printf "\nDone cloning.\n"
			else
				echo $taskID
			fi
		fi
	else
		echo "vapp $1 is online."
	fi
}

function deploy_tmpl2vapp () {
	# Deploy a vapp from a template in private catalog without guest customization.
	# $1: template name
	# $2: Resource Pool (Vdc)
	# $3: VappName
	# $4: VappDesc
	# $5: async (asynchronous deployement, return taskID)

	tmplStatus=$(get_template_status $1)
	if [ $tmplStatus == "RESOLVED" ]
	then
		check_vm_exists "$3"
		if [ $? -eq 0 ]
		then
			vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

			tmplUrl=$(get_template_info $1 | grep href= | cut -d = -f2)
			poolUrl=$(get_pool_info "$2" | grep href= | cut -d = -f2 )

			#<?xml version="1.0" encoding="UTF-8"?>
			#<InstantiateVAppTemplateParams
			#   xmlns="http://www.vmware.com/vcloud/v1.5"
			#   name="$3"
			#   deploy="false"
			#   powerOn="false"
			#   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			#   xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1">
			#   <Description>$4</Description>
			#   <Source
			#      href="$tmplUrl" />
			#</InstantiateVAppTemplateParams>

			echo "/InstantiateVAppTemplateParams/@xmlns=http://www.vmware.com/vcloud/v1.5" > /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/@name=$3" >> /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/@deploy=false" >> /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/@powerOn=false" >> /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/@xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance" >> /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/@xmlns:ovf=http://schemas.dmtf.org/ovf/envelope/1" >> /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/Description=$4" >> /tmp/$$-vm-param
			echo "/InstantiateVAppTemplateParams/Source/@href=$tmplUrl" >> /tmp/$$-vm-param
			cat /tmp/$$-vm-param | 2xml > /tmp/$$-vm-param.xml

			vmResult=$(http --session=vcloud POST $poolUrl/action/instantiateVAppTemplate 'Content-type:application/vnd.vmware.vcloud.instantiateVAppTemplateParams+xml; charset=ISO-8859-1' 'Accept:application/*+xml;version=5.1' < /tmp/$$-vm-param.xml )

			taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
			taskID=$(basename $taskUrl)
			rm -f /tmp/$$-vm-param /tmp/$$-vm-param.xml

			if [ -z "$5" ]
			then
				wait_task_running $taskID
				printf "\nDeployed.\n"
			else
				echo $taskID
			fi
		fi
	else
		echo "template $1 is not ok."
	fi
}

function delete_vapp () {
	# PowerOff, undeploy and Delete a vapp from vdc.
	# $1: vapp name.
	#

	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	vappPowerState=$(get_vapp_power $1)
	if [ $vappPowerState == "POWERED_ON" ]
	then
		power_off_vapp $1
	fi

	vappDeployState=$(get_vapp_deploy $1)
	if [ $vappDeployState == "true" ]
	then
		power_off_vapp $1
		sleep 3
	fi

	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)

	vmResult=$(http --session=vcloud DELETE $vappUrl)
	taskUrl=$(echo $vmResult | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDeleted.\n"
}

function delete_template () {
	# Delete a template from Private catalog.
	# $1: vappTemplate Name.
	vcdLogin=$(http --session=vcloud -a $vcdUser@$vcdOrg:$vcdPass POST $vcdUrl/sessions 'Accept:application/*+xml;version=5.1')

	tmplUrl=$(get_template_info $1 | grep href | cut -d = -f2)
	xmlTask=$(http --session=vcloud DELETE $tmplUrl)
	taskUrl=$(echo $xmlTask | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDone.\n"
}

function get_network_config () {
	# get Network information surch as ip range.
	# $1: Network name

	netUrl=$(http --session=vcloud GET "$vcdUrl/query?type=orgVdcNetwork&filter=(name==$1)" | xml2 | grep "OrgVdcNetworkRecord/@href=" | cut -d = -f 2)
	echo "/NetworkConfigSection/NetworkConfig/@networkName=$1"
	http --session=vcloud $netUrl | xml2 | grep "Configuration/IpScopes" | sed -e "s/OrgVdcNetwork/NetworkConfigSection\/NetworkConfig/g"
	echo "/NetworkConfigSection/NetworkConfig/Configuration/ParentNetwork/@type=application/vnd.vmware.vcloud.network+xml"
	echo "/NetworkConfigSection/NetworkConfig/Configuration/ParentNetwork/@href=$netUrl"
	echo "/NetworkConfigSection/NetworkConfig/Configuration/ParentNetwork/@name=$1"
	echo "/NetworkConfigSection/NetworkConfig/Configuration/FenceMode=bridged"
}

function get_network_allocated_ip () {
	# Get list of allocated ip for a given network name
	# $1: Network Name

	netUrl=$(http --session=vcloud GET "$vcdUrl/query?type=orgVdcNetwork&filter=(name==$1)" | xml2 | grep "OrgVdcNetworkRecord/@href=" | cut -d = -f 2)
	http --session=vcloud GET "$netUrl/allocatedAddresses" | xml2 | grep "IpAddress=" | cut -d = -f 2
}

function get_vapp_network () {
	# get Vapp network Configuration
	# $1: Vapp Name

	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	http --session=vcloud $vappUrl/networkConfigSection/ | xml2
}

function attach_vapp_network () {
	# Attach a vapp to an additionnal network and set ip address to the children VM
	# $1: Vapp Name
	# $2: Network Name
	# $3: ip address

	vappUrl=$(get_vapp_info $1 | grep href | cut -d = -f 2)
	get_vapp_network "$1" > /tmp/$$-vapp-net
	echo "/NetworkConfigSection/NetworkConfig" >> /tmp/$$-vapp-net
	get_network_config "$2" >> /tmp/$$-vapp-net
	cat /tmp/$$-vapp-net | 2xml > /tmp/$$-vapp-net-xml

	xmlTask=$(http --session=vcloud PUT "$vappUrl/networkConfigSection/" 'Content-type: application/vnd.vmware.vcloud.networkConfigSection+xml' < /tmp/$$-vapp-net-xml)
	taskUrl=$(echo $xmlTask | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDone adding network.\n"
	rm -f /tmp/$$-vapp-net-xml /tmp/$$-vapp-net

	vmName=$(get_children_vm_name $1)
	attach_vm_network $vmName "$2" $3

}

function attach_vm_network () {
	# Set ip address to the VM
	# $1: Vm name
	# $2: Network name
	# $3: ip address

	vmUrl=$(http --session=vcloud GET "$vcdUrl/query?type=vm&filter=(name==$1;isVAppTemplate==false)" | xml2 | grep "VMRecord/@href" | cut -d = -f 2)
	http --session=vcloud GET "$vmUrl/networkConnectionSection/" | xml2 | grep -v "/NetworkConnectionSection/Link/" > /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection" >> /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection/@needsCustomization=false" >> /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection/@network=$2" >> /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection/NetworkConnectionIndex=1" >> /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection/IpAddress=$3" >> /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection/IsConnected=true" >> /tmp/$$-vm-net
	echo "/NetworkConnectionSection/NetworkConnection/IpAddressAllocationMode=MANUAL" >> /tmp/$$-vm-net

	cat /tmp/$$-vm-net | 2xml > /tmp/$$-vm-net-xml

	xmlTask=$(http --session=vcloud PUT "$vmUrl/networkConnectionSection/" 'Content-type: application/vnd.vmware.vcloud.networkConnectionSection+xml' < /tmp/$$-vm-net-xml)
	taskUrl=$(echo $xmlTask | xml2 | grep Task/@href | cut -d = -f 2)
	taskID=$(basename $taskUrl)

	wait_task_running $taskID
	printf "\nDone attaching vm to network.\n"

	rm -f /tmp/$$-vm-net /tmp/$$-vm-net-xml
}
